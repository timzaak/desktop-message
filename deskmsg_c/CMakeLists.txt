cmake_minimum_required(VERSION 3.15) # Increased version for modern CMake features
project(deskmsg_c_project VERSION 0.1.0 LANGUAGES C) # Project name can be different, but good for clarity

# --- Helper variable for paths ---
# Assuming this CMakeLists.txt is in deskmsg_c/
# Cargo target directory is typically three levels up from deskmsg_c (e.g., project_root/target/)
get_filename_component(CARGO_TARGET_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../target" ABSOLUTE)
set(DESKMSG_C_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")

# --- Check if the header file exists ---
if(NOT EXISTS "${DESKMSG_C_INCLUDE_DIR}/deskmsg_c.h")
    message(WARNING "deskmsg_c.h not found in ${DESKMSG_C_INCLUDE_DIR}. Ensure 'cargo build' has run for deskmsg_c project to generate it via cbindgen.")
endif()

# --- Define the IMPORTED library target for deskmsg_c ---
# Using SHARED because cdylib produces a dynamic library.
add_library(deskmsg_c_imported SHARED IMPORTED GLOBAL)

# --- Set properties for the IMPORTED target ---

# Location of the header file generated by cbindgen
set_target_properties(deskmsg_c_imported PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${DESKMSG_C_INCLUDE_DIR}"
)

# --- Library file locations (Release) ---
set(DESKMSG_C_IMPLIB_RELEASE "") # Import library for Windows
set(DESKMSG_C_LIBRARY_RELEASE "") # Actual .dll, .so, .dylib

if(WIN32)
    set(DESKMSG_C_IMPLIB_RELEASE "${CARGO_TARGET_DIR}/release/deskmsg_c.dll.lib") # Import lib for MSVC
    set(DESKMSG_C_LIBRARY_RELEASE "${CARGO_TARGET_DIR}/release/deskmsg_c.dll")    # The DLL itself
elseif(APPLE)
    set(DESKMSG_C_LIBRARY_RELEASE "${CARGO_TARGET_DIR}/release/libdeskmsg_c.dylib")
else() # Linux and other Unix-like
    set(DESKMSG_C_LIBRARY_RELEASE "${CARGO_TARGET_DIR}/release/libdeskmsg_c.so")
endif()

# --- Library file locations (Debug) ---
set(DESKMSG_C_IMPLIB_DEBUG "") # Import library for Windows
set(DESKMSG_C_LIBRARY_DEBUG "") # Actual .dll, .so, .dylib

if(WIN32)
    set(DESKMSG_C_IMPLIB_DEBUG "${CARGO_TARGET_DIR}/debug/deskmsg_c.dll.lib") # Import lib for MSVC
    set(DESKMSG_C_LIBRARY_DEBUG "${CARGO_TARGET_DIR}/debug/deskmsg_c.dll")    # The DLL itself
elseif(APPLE)
    set(DESKMSG_C_LIBRARY_DEBUG "${CARGO_TARGET_DIR}/debug/libdeskmsg_c.dylib")
else() # Linux and other Unix-like
    set(DESKMSG_C_LIBRARY_DEBUG "${CARGO_TARGET_DIR}/debug/libdeskmsg_c.so")
endif()

# --- Set IMPORTED_LOCATION and IMPORTED_IMPLIB based on build type ---
# For single-configuration generators (Makefiles, Ninja)
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    if(EXISTS "${DESKMSG_C_LIBRARY_DEBUG}")
        set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_LOCATION "${DESKMSG_C_LIBRARY_DEBUG}")
        if(WIN32 AND EXISTS "${DESKMSG_C_IMPLIB_DEBUG}")
            set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_IMPLIB "${DESKMSG_C_IMPLIB_DEBUG}")
        endif()
    else()
        message(WARNING "Debug library for deskmsg_c not found at ${DESKMSG_C_LIBRARY_DEBUG}. Run 'cargo build' for deskmsg_c.")
    endif()
else() # Default to Release for single-config or if CMAKE_BUILD_TYPE is not Debug
    if(EXISTS "${DESKMSG_C_LIBRARY_RELEASE}")
        set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_LOCATION "${DESKMSG_C_LIBRARY_RELEASE}")
        if(WIN32 AND EXISTS "${DESKMSG_C_IMPLIB_RELEASE}")
            set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_IMPLIB "${DESKMSG_C_IMPLIB_RELEASE}")
        endif()
    else()
        message(WARNING "Release library for deskmsg_c not found at ${DESKMSG_C_LIBRARY_RELEASE}. Run 'cargo build --release' for deskmsg_c.")
    endif()
endif()

# For multi-configuration generators (Visual Studio, Xcode)
set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_CONFIGURATIONS "RELEASE;DEBUG")

if(EXISTS "${DESKMSG_C_LIBRARY_RELEASE}")
    set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_LOCATION_RELEASE "${DESKMSG_C_LIBRARY_RELEASE}")
    if(WIN32 AND EXISTS "${DESKMSG_C_IMPLIB_RELEASE}")
        set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_IMPLIB_RELEASE "${DESKMSG_C_IMPLIB_RELEASE}")
    endif()
else()
    message(STATUS "Release library for deskmsg_c not found at ${DESKMSG_C_LIBRARY_RELEASE} (for multi-config). Run 'cargo build --release'.")
endif()

if(EXISTS "${DESKMSG_C_LIBRARY_DEBUG}")
    set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_LOCATION_DEBUG "${DESKMSG_C_LIBRARY_DEBUG}")
    if(WIN32 AND EXISTS "${DESKMSG_C_IMPLIB_DEBUG}")
        set_property(TARGET deskmsg_c_imported PROPERTY IMPORTED_IMPLIB_DEBUG "${DESKMSG_C_IMPLIB_DEBUG}")
    endif()
else()
    message(STATUS "Debug library for deskmsg_c not found at ${DESKMSG_C_LIBRARY_DEBUG} (for multi-config). Run 'cargo build'.")
endif()

# --- Create an INTERFACE library target ---
add_library(deskmsg_c INTERFACE)
target_link_libraries(deskmsg_c INTERFACE deskmsg_c_imported)

# --- Installation Rules ---
include(GNUInstallDirs)
install(TARGETS deskmsg_c
    EXPORT deskmsg_c_export
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} # For DLLs, .dylib
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} # For .so, .lib (import library on Windows)
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} # Not typically used for cdylib
)
install(FILES "${DESKMSG_C_INCLUDE_DIR}/deskmsg_c.h"
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/deskmsg_c # Install header into a subdirectory
)

# Create a config file for find_package
# This helps other CMake projects find this library using find_package(deskmsg_c)
install(EXPORT deskmsg_c_export
    FILE deskmsg_c-config.cmake
    NAMESPACE deskmsg_c::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/deskmsg_c
)

message(STATUS "deskmsg_c/CMakeLists.txt: Configured deskmsg_c IMPORTED SHARED library.")
message(STATUS "  Include directory: ${DESKMSG_C_INCLUDE_DIR}")
message(STATUS "  Release library hint: ${DESKMSG_C_LIBRARY_RELEASE}")
message(STATUS "  Debug library hint: ${DESKMSG_C_LIBRARY_DEBUG}")
